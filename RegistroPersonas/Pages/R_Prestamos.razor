@page "/prestamos"

@using Models
@using RegistroPersonas.BLL;

@inject IToastService toast

<EditForm Model="Prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de préstamos</h3>
        </div>

        <div class="card-body">
            <form>
                @*PrestamoId*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Prestamo Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Prestamo.PrestamoId" class="form-control col-4"></InputNumber>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar"> <span class="oi oi-zoom-in"></span> Buscar </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Fecha*@
                <div class="form-group">
                    <label>Fecha</label>
                    <InputDate @bind-Value="Prestamo.Fecha" class="form-control"></InputDate>
                    <ValidationMessage For="@(()=>Prestamo.Fecha)" />
                </div>

                @*PersonaId*@
            <div class="form-group">
                <label>Persona</label>
                <select @bind="Prestamo.PersonaId" class="form-control">
                    @foreach (var item in LlenarComboBox())
                    {
                        <option value="@item.PersonasId">@item.Nombre</option>
                    }
                </select>
                <ValidationMessage For="@(()=>Prestamo.PersonaId)" />
                
            </div>

                @*Concepto*@
                <div class="form-group">
                    <label>Concepto</label>
                    <InputText @bind-Value="Prestamo.Concepto" class="form-control"></InputText>
                    <ValidationMessage For="@(()=>Prestamo.Concepto)" />
                </div>

                @*Monto*@
                <div class="form-group">
                    <label>Monto</label>
                    <InputNumber @bind-Value="Prestamo.Monto" class="form-control"></InputNumber>
                    <ValidationMessage For="@(()=>Prestamo.Monto)" />
                </div>

                @*Balance*@
                <div class="form-group">
                    <label>Balance</label>
                    <InputNumber @bind-Value="Prestamo.Balance" class="form-control" ReadOnly="true"></InputNumber>
                    <ValidationMessage For="@(()=>Prestamo.Balance)" />
                </div>

            </form>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"> <span class="oi oi-file"></span> Nuevo </button>
                <button type="submit" class="btn btn-lg btn-success"> <span class="oi oi-cloud"></span> Guardar </button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"> <span class="oi oi-trash"></span> Eliminar </button>
            </div>

        </div>
    </div>
</EditForm>

@code {
    private Prestamos Prestamo = new Prestamos();
    private Personas Persona = new Personas();

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        LlenarComboBox();
    }

    private List<Personas> LlenarComboBox()
    {
        List<Personas> lista = new List<Personas>();
        lista = PersonasBLL.GetList(p => true);

        return lista;
    }

    public void Nuevo()
    {
        Prestamo = new Prestamos();
    }

    private void Buscar()
    {
        if (Prestamo.PrestamoId > 0)
        {
            var encontrado = PrestamosBLL.Buscar(Prestamo.PrestamoId);

            if (encontrado != null)
                this.Prestamo = encontrado;
            else
            {
                Nuevo();
                toast.ShowWarning("¡No encontrado!");
            }

        }
    }

    public void Guardar()
    {
        bool paso;
        paso = PrestamosBLL.Guardar(Prestamo);

        if (paso)
        {
            Nuevo();
            toast.ShowSuccess("¡Guardado con éxito!");
        }
        else
            toast.ShowError("¡No se pudo guardar!");
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = PrestamosBLL.Eliminar(Prestamo.PrestamoId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("¡Eliminado con éxito!");
        }
        else
            toast.ShowError("¡No se pudo eliminar!");
    }
}
